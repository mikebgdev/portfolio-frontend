name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node_modules-${{ hashFiles('package-lock.json') }}

jobs:
  # Install dependencies with caching
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}

  # Code quality checks
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}
          
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript compilation
        run: npx tsc --noEmit

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [install, lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}
          
      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8000' }}
          VITE_ENVIRONMENT: production
          VITE_APP_NAME: Portfolio
          VITE_APP_VERSION: ${{ github.sha }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}
          
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Run security scan with njsscan
        uses: ajinabraham/njsscan-action@v7
        with:
          args: '--sarif --output results.sarif src/ || true'
          
  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.CACHE_KEY }}
          
      - name: Run tests
        run: npm test
        
      - name: Generate coverage report
        run: npm run coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true

  # Deploy job (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
          path: dist/
          
      - name: Deploy to Coolify
        run: |
          echo "Deployment would happen here"
          echo "Build artifacts ready in dist/ directory"
          ls -la dist/
        
  # Notification job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, build, test, security, deploy]
    if: always()
    steps:
      - name: Notify success
        if: needs.build.result == 'success'
        run: echo "✅ Pipeline completed successfully"
        
      - name: Notify failure
        if: needs.build.result == 'failure' || needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security.result == 'failure'
        run: echo "❌ Pipeline failed - check logs for details"